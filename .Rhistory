"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data_DV <- newBASiCS_D_Data(CountsTest = CountsTest, GeneNames = rownames(CountsTest),
CountsRef = CountsRef,
Tech = Tech,
SpikeInputTest = SpikeInput.1[,2],
SpikeInputRef = SpikeInput.1[,2]
)
#OffSet = OffSetCorrection(MCMC.A, MCMC.B)
OffSet = 1
MCMC_DV <- newBASiCS_D_Chain(muTest = MCMC.B@mu,
muRef = MCMC.A@mu / OffSet,
deltaTest = MCMC.B@delta,
delta = MCMC.A@delta,
phi = cbind(MCMC.B@phi, MCMC.A@phi * OffSet), s = cbind(MCMC.B@s, MCMC.A@s),
nu = cbind(MCMC.B@nu, MCMC.A@nu),
thetaTest = MCMC.B@theta,
thetaRef = MCMC.A@theta)
### Genes to exclude from testing
genes <- rownames(CountsRef)[which(grepl("ENS", rownames(CountsRef)))]
rpm.A <- (CountsRef[genes,]/colSums(CountsRef[genes,]))*1000000
rpm.B <- (CountsTest[genes,]/colSums(CountsTest[genes,]))*1000000
cell.count.A <- apply(rpm.A, 1, function(n){length(which(n > 10))})
cell.count.B <- apply(rpm.B, 1, function(n){length(which(n > 10))})
#excl.genes <- names(cell.count.A)[which(cell.count.A/ncol(CountsRef) < 0.1 & cell.count.B/ncol(CountsTest) < 0.1)]
#sel <- rep(TRUE, length(genes))
#sel[match(excl.genes, genes)] <- FALSE
excl.genes <- colnames(MCMC_DV@muTest)[which(colMeans(MCMC_DV@muTest) < 50 & colMeans(MCMC_DV@muRef) < 50)]
sel <- rep(TRUE, length(genes))
sel[match(excl.genes, genes)] <- FALSE
Test <- BASiCS_D_TestDE(Data_DV, MCMC_DV, GeneNames = genes,
EpsilonM = 0, EpsilonD = 0.4, GenesSelect = sel,
EFDR_M = 0.05, EFDR_D = 0.05,
OrderVariable = "GeneNames", GroupLabelRef = cur_names[1], GroupLabelTest = cur_names[2])
cur.name <- paste(c(cur_names[1], cur_names[2]), collapse = "_vs_")
DV_DE_datasets[[cur.name]] <- Test
}
conditions <- list(c("SS51_naive_SS52_naive", "SS51_active_SS52_active"),
c("SS63_naive_SS64_naive", "SS64_active_SS64_active"),
c("SS51_naive_SS52_naive", "SS63_naive_SS64_naive"),
c("SS51_active_SS52_active", "SS63_active_SS64_active"))
DV_DE_datasets <- list()
OffSetCorrection <- function(MCMC1, MCMC2){
median(rowSums(MCMC1@mu)/rowSums(MCMC2@mu))
}
ERCC.conc <- read.table("/Users/eling01//Google Drive//Platy///Data//ERCC_conc.txt", header=TRUE, sep = "\t", fill = TRUE)
ERCC.num <- matrix(data=NA, nrow=nrow(ERCC.conc), ncol=1)
ERCC.num[,1] <- (ERCC.conc[,4]*(10^(-18)))*(6.0221417*(10^23))
ERCC.num.final <- ERCC.num/50000 ### Ask Celia
rownames(ERCC.num) <- rownames(ERCC.num.final) <- ERCC.conc[,2]
for(i in 1:length(conditions)){
cur_names <- conditions[[i]]
MCMC.A <- MCMCs[[cur_names[1]]]
MCMC.B <- MCMCs[[cur_names[2]]]
Data.A <- Datas[[cur_names[1]]]
Data.B <- Datas[[cur_names[2]]]
CountsTest = Data.B@Counts
CountsRef = Data.A@Counts
Tech = as.logical(c(rep("FALSE", length(which(grepl("ENS", rownames(CountsRef))))),
rep("TRUE", length(which(grepl("ERCC", rownames(CountsRef)))))))
SpikeInput <- ERCC.num.final[rownames(CountsRef)[which(grepl("ERCC", rownames(CountsRef)))],1]
SpikeInput.1 <- data.frame("Name" = names(SpikeInput),
"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data_DV <- newBASiCS_D_Data(CountsTest = CountsTest, GeneNames = rownames(CountsTest),
CountsRef = CountsRef,
Tech = Tech,
SpikeInputTest = SpikeInput.1[,2],
SpikeInputRef = SpikeInput.1[,2]
)
#OffSet = OffSetCorrection(MCMC.A, MCMC.B)
OffSet = 1
MCMC_DV <- newBASiCS_D_Chain(muTest = MCMC.B@mu,
muRef = MCMC.A@mu / OffSet,
deltaTest = MCMC.B@delta,
delta = MCMC.A@delta,
phi = cbind(MCMC.B@phi, MCMC.A@phi * OffSet), s = cbind(MCMC.B@s, MCMC.A@s),
nu = cbind(MCMC.B@nu, MCMC.A@nu),
thetaTest = MCMC.B@theta,
thetaRef = MCMC.A@theta)
### Genes to exclude from testing
genes <- rownames(CountsRef)[which(grepl("ENS", rownames(CountsRef)))]
rpm.A <- (CountsRef[genes,]/colSums(CountsRef[genes,]))*1000000
rpm.B <- (CountsTest[genes,]/colSums(CountsTest[genes,]))*1000000
cell.count.A <- apply(rpm.A, 1, function(n){length(which(n > 10))})
cell.count.B <- apply(rpm.B, 1, function(n){length(which(n > 10))})
#excl.genes <- names(cell.count.A)[which(cell.count.A/ncol(CountsRef) < 0.1 & cell.count.B/ncol(CountsTest) < 0.1)]
#sel <- rep(TRUE, length(genes))
#sel[match(excl.genes, genes)] <- FALSE
excl.genes <- colnames(MCMC_DV@muTest)[which(colMeans(MCMC_DV@muTest) < 50 & colMeans(MCMC_DV@muRef) < 50)]
sel <- rep(TRUE, length(genes))
sel[match(excl.genes, genes)] <- FALSE
Test <- BASiCS_D_TestDE(Data_DV, MCMC_DV, GeneNames = genes,
EpsilonM = 0, EpsilonD = 0.4, GenesSelect = sel,
EFDR_M = 0.05, EFDR_D = 0.05,
OrderVariable = "GeneNames", GroupLabelRef = cur_names[1], GroupLabelTest = cur_names[2])
cur.name <- paste(c(cur_names[1], cur_names[2]), collapse = "_vs_")
DV_DE_datasets[[cur.name]] <- Test
}
conditions <- list(c("SS51_naive_SS52_naive", "SS51_active_SS52_active"),
c("SS63_naive_SS64_naive", "SS63_active_SS64_active"),
c("SS51_naive_SS52_naive", "SS63_naive_SS64_naive"),
c("SS51_active_SS52_active", "SS63_active_SS64_active"))
DV_DE_datasets <- list()
OffSetCorrection <- function(MCMC1, MCMC2){
median(rowSums(MCMC1@mu)/rowSums(MCMC2@mu))
}
ERCC.conc <- read.table("/Users/eling01//Google Drive//Platy///Data//ERCC_conc.txt", header=TRUE, sep = "\t", fill = TRUE)
ERCC.num <- matrix(data=NA, nrow=nrow(ERCC.conc), ncol=1)
ERCC.num[,1] <- (ERCC.conc[,4]*(10^(-18)))*(6.0221417*(10^23))
ERCC.num.final <- ERCC.num/50000 ### Ask Celia
rownames(ERCC.num) <- rownames(ERCC.num.final) <- ERCC.conc[,2]
for(i in 1:length(conditions)){
cur_names <- conditions[[i]]
MCMC.A <- MCMCs[[cur_names[1]]]
MCMC.B <- MCMCs[[cur_names[2]]]
Data.A <- Datas[[cur_names[1]]]
Data.B <- Datas[[cur_names[2]]]
CountsTest = Data.B@Counts
CountsRef = Data.A@Counts
Tech = as.logical(c(rep("FALSE", length(which(grepl("ENS", rownames(CountsRef))))),
rep("TRUE", length(which(grepl("ERCC", rownames(CountsRef)))))))
SpikeInput <- ERCC.num.final[rownames(CountsRef)[which(grepl("ERCC", rownames(CountsRef)))],1]
SpikeInput.1 <- data.frame("Name" = names(SpikeInput),
"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data_DV <- newBASiCS_D_Data(CountsTest = CountsTest, GeneNames = rownames(CountsTest),
CountsRef = CountsRef,
Tech = Tech,
SpikeInputTest = SpikeInput.1[,2],
SpikeInputRef = SpikeInput.1[,2]
)
#OffSet = OffSetCorrection(MCMC.A, MCMC.B)
OffSet = 1
MCMC_DV <- newBASiCS_D_Chain(muTest = MCMC.B@mu,
muRef = MCMC.A@mu / OffSet,
deltaTest = MCMC.B@delta,
delta = MCMC.A@delta,
phi = cbind(MCMC.B@phi, MCMC.A@phi * OffSet), s = cbind(MCMC.B@s, MCMC.A@s),
nu = cbind(MCMC.B@nu, MCMC.A@nu),
thetaTest = MCMC.B@theta,
thetaRef = MCMC.A@theta)
### Genes to exclude from testing
genes <- rownames(CountsRef)[which(grepl("ENS", rownames(CountsRef)))]
rpm.A <- (CountsRef[genes,]/colSums(CountsRef[genes,]))*1000000
rpm.B <- (CountsTest[genes,]/colSums(CountsTest[genes,]))*1000000
cell.count.A <- apply(rpm.A, 1, function(n){length(which(n > 10))})
cell.count.B <- apply(rpm.B, 1, function(n){length(which(n > 10))})
#excl.genes <- names(cell.count.A)[which(cell.count.A/ncol(CountsRef) < 0.1 & cell.count.B/ncol(CountsTest) < 0.1)]
#sel <- rep(TRUE, length(genes))
#sel[match(excl.genes, genes)] <- FALSE
excl.genes <- colnames(MCMC_DV@muTest)[which(colMeans(MCMC_DV@muTest) < 50 & colMeans(MCMC_DV@muRef) < 50)]
sel <- rep(TRUE, length(genes))
sel[match(excl.genes, genes)] <- FALSE
Test <- BASiCS_D_TestDE(Data_DV, MCMC_DV, GeneNames = genes,
EpsilonM = 0, EpsilonD = 0.4, GenesSelect = sel,
EFDR_M = 0.05, EFDR_D = 0.05,
OrderVariable = "GeneNames", GroupLabelRef = cur_names[1], GroupLabelTest = cur_names[2])
cur.name <- paste(c(cur_names[1], cur_names[2]), collapse = "_vs_")
DV_DE_datasets[[cur.name]] <- Test
}
boxplot(DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$OverDispRef[DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$ResultDiffExp == "NoDiff"])
boxplot(log10(DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$OverDispRef[DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$ResultDiffExp == "NoDiff"]))
boxplot(log10(DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$OverDispRef[DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$ResultDiffExp == "NoDiff"]), log10(DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$OverDispTest[DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table$ResultDiffExp == "NoDiff"]))
library(BASiCS)
library(Rtsne)
library(RColorBrewer)
load("/Users/eling01/Google Drive/Platy/5th_approch/data/normalized/10000_Genes_160527.RData")
HVG <- BASiCS_DetectHVG(Data = Data, object = MCMC_Output, VarThreshold = 0.98, EviThreshold = 0.7, OrderVariable = "Mu")
HVG.1 <- HVG$Table[HVG$Table$HVG == TRUE,]
head(HVG.1$GeneNames, n = 100)
library(sparcl)
groups <- list()
groups <- list()
for(k in 2:9){
x <- t(log10(input[as.character(HVG.1$GeneNames),] + 1))
x <- scale(x, TRUE, TRUE)
tune <- KMeansSparseCluster.permute(x = x, K = k, wbounds = seq(2, 100, 2), nperms = 15)
plot(tune$gaps)
group <- KMeansSparseCluster(x = x, K = k, wbounds = tune$bestw)
groups[[paste("group", k, sep="")]] <- group
}
input <- exp.data
for(k in 2:9){
x <- t(log10(input[as.character(HVG.1$GeneNames),] + 1))
x <- scale(x, TRUE, TRUE)
tune <- KMeansSparseCluster.permute(x = x, K = k, wbounds = seq(2, 100, 2), nperms = 15)
plot(tune$gaps)
group <- KMeansSparseCluster(x = x, K = k, wbounds = tune$bestw)
groups[[paste("group", k, sep="")]] <- group
}
groups$group9
rm(list=setdiff(ls(), c("groups", "exp.data", "HVG.1")))
save.image("/Users/eling01/Google Drive/Platy/5th_approch/revision/groups_iter.RData")
ss.all <- list()
for(x in 1:length(groups)){
ss <- 0
for(i in 1:length(unique(groups[[x]][[1]]$Cs))){
cells <- log10(input[names(which(groups[[x]][[1]]$ws > 0.02)),which(groups[[x]][[1]]$Cs == i)] + 1)
### SSE distance
clust.mean <- rowMeans(cells)
r.dist <- apply(cells, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_ss <- sum(e.dist)
ss <- ss + cur_ss
}
twss <- ss
all <- log10(input[names(which(groups[[x]][[1]]$ws > 0.02)),] + 1)
clust.mean <- rowMeans(all)
r.dist <- apply(all, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_sse <- sum(e.dist)
wsse <- cur_sse
ss.all[[x]] <- twss
}
ss.all <- list()
for(x in 1:length(groups)){
ss <- 0
for(i in 1:length(unique(groups[[x]][[1]]$Cs))){
cells <- log10(exp.data[names(which(groups[[x]][[1]]$ws > 0.02)),which(groups[[x]][[1]]$Cs == i)] + 1)
### SSE distance
clust.mean <- rowMeans(cells)
r.dist <- apply(cells, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_ss <- sum(e.dist)
ss <- ss + cur_ss
}
twss <- ss
all <- log10(exp.data[names(which(groups[[x]][[1]]$ws > 0.02)),] + 1)
clust.mean <- rowMeans(all)
r.dist <- apply(all, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_sse <- sum(e.dist)
wsse <- cur_sse
ss.all[[x]] <- twss
}
plot(unlist(ss.all))
ss.all <- list()
for(x in 1:length(groups)){
ss <- 0
for(i in 1:length(unique(groups[[x]][[1]]$Cs))){
cells <- log10(exp.data[as.character(HVG.1$GeneNames),which(groups[[x]][[1]]$Cs == i)] + 1)
### SSE distance
clust.mean <- rowMeans(cells)
r.dist <- apply(cells, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_ss <- sum(e.dist)
ss <- ss + cur_ss
}
twss <- ss
all <- log10(exp.data[as.character(HVG.1$GeneNames),] + 1)
clust.mean <- rowMeans(all)
r.dist <- apply(all, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_sse <- sum(e.dist)
wsse <- cur_sse
ss.all[[x]] <- 1-(twss/wsse)
}
plot(unlist(ss.all))
ss.all <- list()
for(x in 1:length(groups)){
ss <- 0
for(i in 1:length(unique(groups[[x]][[1]]$Cs))){
cells <- log10(exp.data[names(which(groups[[x]][[1]]$ws > 0.02)),which(groups[[x]][[1]]$Cs == i)] + 1)
### SSE distance
clust.mean <- rowMeans(cells)
r.dist <- apply(cells, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_ss <- sum(e.dist)
ss <- ss + cur_ss
}
twss <- ss
all <- log10(exp.data[names(which(groups[[x]][[1]]$ws > 0.02)),] + 1)
clust.mean <- rowMeans(all)
r.dist <- apply(all, 2, function(n){(n-clust.mean)^2})
e.dist <- sqrt(colSums(r.dist))
cur_sse <- sum(e.dist)
wsse <- cur_sse
ss.all[[x]] <- 1-(twss/wsse)
}
plot(unlist(ss.all))
length(which(groups$group2[[1]]$ws > 0.02))
length(which(groups$group3[[1]]$ws > 0.02))
length(which(groups$group4[[1]]$ws > 0.02))
length(which(groups$group5[[1]]$ws > 0.02))
length(which(groups$group6[[1]]$ws > 0.02))
length(which(groups$group7[[1]]$ws > 0.02))
length(which(groups$group8[[1]]$ws > 0.02))
length(which(groups$group9[[1]]$ws > 0.02))
length(which(groups$group2[[1]]$ws > 0.03))
length(which(groups$group3[[1]]$ws > 0.03))
length(which(groups$group4[[1]]$ws > 0.03))
length(which(groups$group5[[1]]$ws > 0.03))
length(which(groups$group6[[1]]$ws > 0.03))
length(which(groups$group7[[1]]$ws > 0.03))
length(which(groups$group8[[1]]$ws > 0.03))
length(which(groups$group9[[1]]$ws > 0.03))
load("/Users/eling01/Google Drive/BASiCS_add-on/Results/MCMCs_active_naive.RData")
MCMC_active <- MCMCs$active
Data_active <- Datas$active
MCMC_naive <- MCMCs$naive
Data_naive <- Datas$naive
plot(log10(apply(MCMC_active@mu, 2, median)), MCMC_active@X%*%apply(MCMC_active@beta, 2, median), pch = 16, cex = 0.5, xlab = "log10(mu)", ylab = "X%*%apply(beta, 2, median)")
plot(log10(apply(MCMC_active@mu, 2, median)), apply(MCMC_active@epsilon, 2, median), pch = 16, cex = 0.5)
plot(apply(MCMC_active@epsilon, 2, median), log10(apply(MCMC_active@delta, 2, median)) - MCMC_active@X%*%apply(MCMC_active@beta, 2, median), pch = 16, cex = 0.5)
source("/Users/eling01/Google Drive/BASiCS_add-on/BASiCSplus/R/FunctionsPart1.R")
source("/Users/eling01/Google Drive/BASiCS_add-on/BASiCSplus/R/FunctionsPart2.R")
source("/Users/eling01/Google Drive/BASiCS_add-on/BASiCSplus/R/Classes.R")
source("/Users/eling01/Google Drive/BASiCS_add-on/BASiCSplus/R/Methods.R")
OffSetCorrection <- function(Chain1, Chain2)
{
ModelOffSet21 = median(rowSums(Chain2@mu)/rowSums(Chain1@mu))
cat(paste("Model offset 2 vs 1:", ModelOffSet21, "\n"))
list("OffSet21" = ModelOffSet21)
}
OffSet <- OffSetCorrection(MCMC_naive, MCMC_active)
MCMC_naive@mu <- MCMC_naive@mu * OffSet$OffSet21
MCMC_naive@phi <- MCMC_naive@phi/OffSet$OffSet21
MCMC_combined <- CombineBASiCS_Chain(ChainTest = MCMC_active, ChainRef = MCMC_naive)
Data_combined <- CombineBASiCS_Data(DataTest = Data_active, DataRef = Data_naive)
### Genes to exclude
sel <- colnames(MCMC_combined@muTest)[log10(apply(MCMC_combined@muTest, 2, median)) > 0 & log10(apply(MCMC_combined@muRef, 2, median)) > 0]
sel <- colnames(MCMC_combined@muTest) %in% sel
Test <- BASiCS_D_TestDE(Data = Data_combined, object = MCMC_combined, GeneNames = Data_combined@GeneNames[!Data_combined@Tech], EpsilonM = 2, EpsilonD = 0.4, DistanceE = 0.2, OrderVariable = "GeneNames")
Test_FC0 <- BASiCS_D_TestDE(Data = Data_combined, object = MCMC_combined, GeneNames = Data_combined@GeneNames[!Data_combined@Tech], EpsilonM = 0, EpsilonD = 0.4, DistanceE = 0.2, OrderVariable = "GeneNames", GenesSelect = sel)
dat <- data.frame(row.names = Test$Table$GeneNames, MeanRef = Test_FC0$Table$ExpRef, MeanTest = Test_FC0$Table$ExpTest, MeanResult=ifelse(Test_FC0$Table$ResultDiffExp == "NoDiff", "NoDiff", ifelse(Test_FC0$Table$ResultDiffExp == "ExcludedByUser", "Excluded", "Heterogeneity")))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic() + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
library(ggplot2)
dat <- data.frame(row.names = Test$Table$GeneNames, MeanRef = Test_FC0$Table$ExpRef, MeanTest = Test_FC0$Table$ExpTest, MeanResult=ifelse(Test_FC0$Table$ResultDiffExp == "NoDiff", "NoDiff", ifelse(Test_FC0$Table$ResultDiffExp == "ExcludedByUser", "Excluded", "Heterogeneity")))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic() + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(fontsize=16) + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(size=16) + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(text = element_text(size=20)) + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "black", "#0571b0"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab("Naive log10(\mu)")
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab("Naive log10($\mu$)")
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab("Naive log10($\\mu$)")
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(expression("Naive log10($\\mu$)"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(paste("Naive log10(", expression(mu), ")"))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(expression(mu))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = expression(log10(mu)))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = expression(log_{10}(mu)))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = expression(Naive log10(mu)))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = expression(Naivelog10(mu)))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = expression(Naive log10(mu)))
help(expression)
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic(base_size = 20) + scale_color_manual(values = c("gray", "#ca0020", "black")) + xlab(label = c(expression(log10(mu)), "Naive"))
Test_FC0$Table <- Test_FC0$Table[Test_FC0$Table$ResultDiffExp != "ExcludedByUser",]
dat2 <- data.frame(row.names = Test_FC0$Table$GeneNames[Test_FC0$Table$ResultDiffExp == "NoDiff"], DispRef = Test_FC0$Table$OverDispRef[Test_FC0$Table$ResultDiffExp == "NoDiff"], DispTest = Test_FC0$Table$OverDispTest[Test_FC0$Table$ResultDiffExp == "NoDiff"], DispResult=Test_FC0$Table$ResultDiffOverDisp[Test_FC0$Table$ResultDiffExp == "NoDiff"])
ggplot(dat2) + geom_point(aes(x=log10(DispRef), y=log10(DispTest), colour=DispResult)) + theme_classic() + geom_abline(slope = 1, intercept = 0) + scale_color_manual(values = c("gray", "#a6611a", "#018571")) + scale_x_continuous(limits = c(-1, 2)) + scale_y_continuous(limits = c(-1, 2))
dat3 <- data.frame(row.names = Test_FC0$Table$GeneNames, HetRef = Test_FC0$Table$HetRef, HetTest = Test_FC0$Table$HetTest, HetResult= Test_FC0$Table$ResultDistHet)
ggplot(dat3) + geom_point(aes(x=HetRef, y=HetTest, colour=HetResult)) + theme_classic() + geom_abline(slope = 1, intercept = 0) + scale_color_manual(values = c("gray", "#7b3294", "#008837")) + scale_x_continuous(limits = c(-2, 1)) + scale_y_continuous(limits = c(-2, 1))
library(Rtsne)
library(pheatmap)
library(ggplot2)
library(BASiCS)
setwd("/Users/eling01/GitHub/ImmuneAging2017/")
genenames <- read.table("Data/Genenames.txt", sep = "\t", header = TRUE)
rownames(genenames) <- genenames[,1]
exp.data <- read.table("Data/normalized_data.txt", header = TRUE, sep = "\t")
Data <- exp.data[,which(grepl("SS51_naive", colnames(exp.rates.noLVG)) | grepl("SS52_naive", colnames(exp.rates.noLVG)) |
grepl("SS51_active", colnames(exp.rates.noLVG)) | grepl("SS52_active", colnames(exp.rates.noLVG)) |
grepl("SS19_naive", colnames(exp.rates.noLVG)) | grepl("SS25_naive", colnames(exp.rates.noLVG)) |
grepl("SS19_active", colnames(exp.rates.noLVG)) | grepl("SS25_active", colnames(exp.rates.noLVG)))
]
Data <- exp.data[,which(grepl("SS51_naive", colnames(exp.data)) | grepl("SS52_naive", colnames(exp.data)) |
grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)) |
grepl("SS19_naive", colnames(exp.data)) | grepl("SS25_naive", colnames(exp.data)) |
grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
tsne <- Rtsne(t(log10(Data + 1)), perplexity = 30)
state <- vector(length = ncol(Data))
state[which(grepl("SS51_naive", colnames(Data)) | grepl("SS52_naive", colnames(Data)))] <- "B6_naive"
state[which(grepl("SS51_active", colnames(Data)) | grepl("SS52_active", colnames(Data)))] <- "B6_active"
state[which(grepl("SS19_naive", colnames(Data)) | grepl("SS25_naive", colnames(Data)))] <- "CAST_naive"
state[which(grepl("SS19_active", colnames(Data)) | grepl("SS25_active", colnames(Data)))] <- "CAST_active"
tsne.df <- data.frame(tsne.1 = tsne$Y[,1], tsne.2 = tsne$Y[,2], State = state)
ggplot(data = tsne.df, aes(tsne.1, tsne.2)) +
geom_point(size = 10, aes(col = state), shape = "-") +
scale_colour_manual(values = c("black", "coral4", "tan3", "red")) +
theme_minimal() +
ylab("tSNE 1") +
xlab("tSNE 2")
load("/Users/eling01/Google Drive//scMouse_Immun/Analysis/Variance/DV_DE_all_B6CAST.RData")
DE.B6.young <- DV_DE_datasets$SS51_naive_SS52_naive_vs_SS51_active_SS52_active$Table
DE.B6.young.active <- DE.B6.young[DE.B6.young$ResultDiffExp == "SS51_active_SS52_active+" & DE.B6.young$ExpLogFC > 2,]
DE.B6.young.active <- DE.B6.young.active[order(DE.B6.young.active$ExpLogFC, decreasing = TRUE),]
DE.B6.young.naive <- DE.B6.young[DE.B6.young$ResultDiffExp == "SS51_naive_SS52_naive+" & DE.B6.young$ExpLogFC < -2,]
DE.B6.young.naive <- DE.B6.young.naive[order(DE.B6.young.naive$ExpLogFC, decreasing = FALSE),]
DE.CAST.young <- DV_DE_datasets$SS19_naive_SS25_naive_vs_SS19_active_SS25_active$Table
DE.CAST.young.active <- DE.CAST.young[DE.CAST.young$ResultDiffExp == "SS19_active_SS25_active+" & DE.CAST.young$ExpLogFC > 2,]
DE.CAST.young.active <- DE.CAST.young.active[order(DE.CAST.young.active$ExpLogFC, decreasing = TRUE),]
DE.CAST.young.naive <- DE.CAST.young[DE.CAST.young$ResultDiffExp == "SS19_naive_SS25_naive+" & DE.CAST.young$ExpLogFC < -2,]
DE.CAST.young.naive <- DE.CAST.young.naive[order(DE.CAST.young.naive$ExpLogFC, decreasing = FALSE),]
B6_CAST_active <- DV_DE_datasets$SS51_active_SS52_active_vs_SS19_active_SS25_active$Table
B6_CAST_active.CAST <- B6_CAST_active[B6_CAST_active$ResultDiffExp == "SS19_active_SS25_active+" & B6_CAST_active$ExpLogFC > 2,]
B6_CAST_active.B6 <- B6_CAST_active[B6_CAST_active$ResultDiffExp == "SS51_active_SS52_active+" & B6_CAST_active$ExpLogFC < -2,]
B6_CAST_naive <- DV_DE_datasets$SS51_naive_SS52_naive_vs_SS19_naive_SS25_naive$Table
B6_CAST_naive.CAST <- B6_CAST_naive[B6_CAST_naive$ResultDiffExp == "SS19_naive_SS25_naive+" & B6_CAST_naive$ExpLogFC > 2,]
B6_CAST_naive.B6 <- B6_CAST_naive[B6_CAST_naive$ResultDiffExp == "SS51_naive_SS52_naive+" & B6_CAST_naive$ExpLogFC < -2,]
shared.n <- match(as.character(DE.B6.young.naive$GeneNames), as.character(DE.CAST.young.naive$GeneNames))
shared.n <- as.character(genenames[as.character(DE.CAST.young.naive$GeneNames)[shared.n[!is.na(shared.n)]],2])
shared.a <- match(as.character(DE.B6.young.active$GeneNames), as.character(DE.CAST.young.active$GeneNames))
shared.a <- as.character(genenames[as.character(DE.CAST.young.active$GeneNames)[shared.a[!is.na(shared.a)]],2])
length(shared.a)
length(shared.n)
load("/Users/eling01/Google Drive//scMouse_Immun/Analysis/Variance/DV_DE_all_B6CAST.RData")
DE.CAST.young.active <- DE.CAST.young[DE.CAST.young$ResultDiffExp == "SS19_active_SS25_active+",]
DE.B6.young.active <- DE.B6.young[DE.B6.young$ResultDiffExp == "SS51_active_SS52_active+",]
DE.CAST.young.active <- DE.CAST.young[DE.CAST.young$ResultDiffExp == "SS19_active_SS25_active+",]
length(intersect(as.character(DE.B6.young.active$GeneNames), as.character(DE.CAST.young.active$GeneNames)))
shared.a <- intersect(as.character(DE.B6.young.active$GeneNames), as.character(DE.CAST.young.active$GeneNames))
sahred.a
shared.a
genenames[shared.a,2]
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation.RData")
spec.test <- DV_DE_datasets$SS51_active_SS52_active_vs_SS19_active_SS25_active_vs_DE$Table
B6.spec.a <- as.character(genenames[spec.test$GeneNames[spec.test$ResultDiffExp == "SS51_active_SS52_active+"],2])
CAST.spec.a <- as.character(genenames[spec.test$GeneNames[spec.test$ResultDiffExp == "SS19_active_SS25_active+"],2])
B6.spec.a
CAST.spec.a
B6.spec.a <- as.character(spec.test$GeneNames[spec.test$ResultDiffExp == "SS51_active_SS52_active+"])
CAST.spec.a <- as.character(spec.test$GeneNames[spec.test$ResultDiffExp == "SS19_active_SS25_active+"])
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_CASTmapping.RData")
DV_DE_datasets.CAST <- DV_DE_datasets
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_B6mapping.RData")
DV_DE_datasets.B6 <- DV_DE_datasets
genes <- c(DE.B6.map$GeneNames[DE.B6.map$ResultDiffExp != "NoDiff" & DE.B6.map$ResultDiffExp != "ExcludedByUser"], DE.CAST.map$GeneNames[DE.CAST.map$ResultDiffExp != "NoDiff" & DE.CAST.map$ResultDiffExp != "ExcludedByUser"])
genes <- unique(genes)
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_CASTmapping.RData")
DV_DE_datasets.CAST <- DV_DE_datasets
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_B6mapping.RData")
DV_DE_datasets.B6 <- DV_DE_datasets
DE.B6.map <- DV_DE_datasets.B6$Mus_SS51_active_Mus_SS52_active_vs_CAST_SS51_active_CAST_SS52_active_vs_DE$Table
DE.CAST.map <- DV_DE_datasets.CAST$Mus_SS19_active_Mus_SS25_active_vs_CAST_SS19_active_CAST_SS25_active_vs_DE$Table
genes <- c(DE.B6.map$GeneNames[DE.B6.map$ResultDiffExp != "NoDiff" & DE.B6.map$ResultDiffExp != "ExcludedByUser"], DE.CAST.map$GeneNames[DE.CAST.map$ResultDiffExp != "NoDiff" & DE.CAST.map$ResultDiffExp != "ExcludedByUser"])
genes <- as.character(genenames[unique(genes),2])
B6.spec.a <- B6.spec.a[-which(!is.na(match(B6.spec.a, genes)))]
CAST.spec.a <- CAST.spec.a[-which(!is.na(match(CAST.spec.a, genes)))]
genes <- c(DE.B6.map$GeneNames[DE.B6.map$ResultDiffExp != "NoDiff" & DE.B6.map$ResultDiffExp != "ExcludedByUser"], DE.CAST.map$GeneNames[DE.CAST.map$ResultDiffExp != "NoDiff" & DE.CAST.map$ResultDiffExp != "ExcludedByUser"])
genes <- unique(genes)
genes
B6.spec.a <- B6.spec.a[-which(!is.na(match(B6.spec.a, genes)))]
B6.spec.a
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_CASTmapping.RData")
DV_DE_datasets.CAST <- DV_DE_datasets
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_B6mapping.RData")
DV_DE_datasets.B6 <- DV_DE_datasets
DE.B6.map <- DV_DE_datasets.B6$Mus_SS51_active_Mus_SS52_active_vs_CAST_SS51_active_CAST_SS52_active_vs_DE$Table
DE.CAST.map <- DV_DE_datasets.CAST$Mus_SS19_active_Mus_SS25_active_vs_CAST_SS19_active_CAST_SS25_active_vs_DE$Table
genes <- c(DE.B6.map$GeneNames[DE.B6.map$ResultDiffExp != "NoDiff" & DE.B6.map$ResultDiffExp != "ExcludedByUser"], DE.CAST.map$GeneNames[DE.CAST.map$ResultDiffExp != "NoDiff" & DE.CAST.map$ResultDiffExp != "ExcludedByUser"])
genes <- as.character(genenames[unique(genes),2])
genes
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_CASTmapping.RData")
DV_DE_datasets.CAST <- DV_DE_datasets
load("/Users/eling01/Google Drive/scMouse_Immun/Analysis/Variance/DV_DE_B6CAST_speciesSpec_activation_B6mapping.RData")
DV_DE_datasets.B6 <- DV_DE_datasets
DE.B6.map <- DV_DE_datasets.B6$Mus_SS51_active_Mus_SS52_active_vs_CAST_SS51_active_CAST_SS52_active_vs_DE$Table
DE.CAST.map <- DV_DE_datasets.CAST$Mus_SS19_active_Mus_SS25_active_vs_CAST_SS19_active_CAST_SS25_active_vs_DE$Table
genes <- c(DE.B6.map$GeneNames[DE.B6.map$ResultDiffExp != "NoDiff" & DE.B6.map$ResultDiffExp != "ExcludedByUser"], DE.CAST.map$GeneNames[DE.CAST.map$ResultDiffExp != "NoDiff" & DE.CAST.map$ResultDiffExp != "ExcludedByUser"])
genes
B6.spec.a <- as.character(spec.test$GeneNames[spec.test$ResultDiffExp == "SS51_active_SS52_active+"])
CAST.spec.a <- as.character(spec.test$GeneNames[spec.test$ResultDiffExp == "SS19_active_SS25_active+"])
B6.spec.a
genes <- unique(genes)
genes
match(B6.spec.a, genes)
which(!is.na(match(B6.spec.a, genes)))
B6.spec.a <- B6.spec.a[-which(!is.na(match(B6.spec.a, genes)))]
CAST.spec.a <- CAST.spec.a[-which(!is.na(match(CAST.spec.a, genes)))]
B6.spec.a
CAST.spec.a
Data <- exp.data[,c(which(grepl("SS51_naive", colnames(exp.data)) | grepl("SS52_naive", colnames(exp.data)))[sample(1:length(which(grepl("SS51_naive", colnames(exp.data)) | grepl("SS52_naive", colnames(exp.data)))), 30)],
which(grepl("SS19_naive", colnames(exp.data)) | grepl("SS25_naive", colnames(exp.data)))[sample(1:length(which(grepl("SS19_naive", colnames(exp.data)) | grepl("SS25_naive", colnames(exp.data)))), 30)],
which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)))[sample(1:length(which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)))), 30)],
which(grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))[sample(1:length(which(grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))), 30)]
)]
genes.shared <- shared.a[sample(1:length(shared.a), 100)]
genes.B6 <- B6.spec.a[sample(1:length(B6.spec.a), 38)]
genes.CAST <- CAST.spec.a[sample(1:length(CAST.spec.a), 34)]
pheatmap(log10(Data[genes.shared[order(rowMeans(Data[genes.shared,]), decreasing = TRUE)],] + 1), cluster_rows = FALSE, fontsize_row = 2, fontsize_col = 4, cellwidth = 3, cellheight = 3, colorRampPalette(colors = c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"))(100)[1:round(log10(max(Data[genes.shared,]))/6*100, 0)], border_color = NA, cluster_cols = FALSE, gaps_col = c(30,60,90))
pheatmap(log10(Data[genes.shared[order(rowMeans(Data[genes.shared,]), decreasing = TRUE)],] + 1), cluster_rows = FALSE, fontsize_row = 2, fontsize_col = 4, cellwidth = 3, cellheight = 3, colorRampPalette(colors = c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"))(100)[1:round(log10(max(Data[genes.shared,]))/6*100, 0)], border_color = NA, cluster_cols = FALSE, gaps_col = c(30,60,90))
pheatmap(log10(Data[genes.B6[order(rowMeans(Data[genes.B6,]), decreasing = TRUE)],] + 1), cluster_rows = FALSE, fontsize_row = 2, fontsize_col = 4, cellwidth = 3, cellheight = 3, colorRampPalette(colors = c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"))(100)[1:round(log10(max(Data[genes.B6,]))/6*100, 0)], border_color = NA, cluster_cols = FALSE, gaps_col = c(30,60,90))
pheatmap(log10(Data[genes.CAST[order(rowMeans(Data[genes.CAST,]), decreasing = TRUE)],] + 1), cluster_rows = FALSE, fontsize_row = 2, fontsize_col = 4, cellwidth = 3, cellheight = 3, colorRampPalette(colors = c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"))(100)[1:round(log10(max(Data[genes.CAST,]))/6*100, 0)], border_color = NA, cluster_cols = FALSE, gaps_col = c(30,60,90))
results <- read.table("/Users/eling01/Google Drive/scMouse_Immun/Manuscript/GO_shared_genes.txt", header = TRUE, sep = '\t')
barplot(height = -log10(results$Bonferroni), col = "white", names.arg = results$Term, las = 2, cex.names = 0.5, ylim = c(0,5))
results <- results[results$Bonferroni < 0.1,]
par(mar = c(16,4,1,4))
barplot(height = -log10(results$Bonferroni), col = "white", names.arg = results$Term, las = 2, cex.names = 0.5, ylim = c(0,5))
abline(a = 1, b = 0, col = "red", lwd = 2)
genes.shared <- shared.a[sample(1:length(shared.a), 70)]
genes.B6 <- B6.spec.a[sample(1:length(B6.spec.a), 70)]
genes.CAST <- CAST.spec.a[sample(1:length(CAST.spec.a), 70)]
genes.shared
shared.cells <- exp.data[genes.shared,
which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)) | grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
shared.cells <- exp.data[genes.shared,
which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)) | grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
B6.cells <- exp.data[genes.B6,
which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)) | grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
CAST.cells <- exp.data[genes.CAST,
which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)) | grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
plot(hist(apply(shared.cells[sample(1:nrow(shared.cells), 70),], 1, function(n){length(which(n > 0))/ncol(shared.cells)}), breaks = 20), xlim = c(0,1),ylim = c(0,30))
abline(v = median(apply(shared.cells, 1, function(n){length(which(n > 0))/ncol(shared.cells)})))
dev.off()
plot(hist(apply(shared.cells[sample(1:nrow(shared.cells), 70),], 1, function(n){length(which(n > 0))/ncol(shared.cells)}), breaks = 20), xlim = c(0,1),ylim = c(0,30))
abline(v = median(apply(shared.cells, 1, function(n){length(which(n > 0))/ncol(shared.cells)})))
plot(hist(apply(B6.cells[sample(1:nrow(B6.cells), 70),], 1, function(n){length(which(n > 0))/ncol(B6.cells)}), breaks = 20), xlim = c(0,1),ylim = c(0,30))
abline(v = median(apply(B6.cells, 1, function(n){length(which(n > 0))/ncol(B6.cells)})))
plot(hist(apply(CAST.cells[sample(1:nrow(CAST.cells), 70),], 1, function(n){length(which(n > 0))/ncol(CAST.cells)}), breaks = 20), xlim = c(0,1),ylim = c(0,30))
abline(v = median(apply(CAST.cells, 1, function(n){length(which(n > 0))/ncol(CAST.cells)})))
