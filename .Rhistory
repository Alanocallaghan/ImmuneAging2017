meanGenesExpressed = meanGenes[meanGenes > 0 & !is.na(CV2Genes) & CV2Genes > 0]
CV2GenesExpressed = CV2Genes[meanGenes > 0 & !is.na(CV2Genes) & CV2Genes > 0]
qloess <- Quantile.loess(log10(CV2GenesExpressed), log10(meanGenesExpressed),
the.quant=.5, window.size=windowSize, percent.of.overlap.between.two.windows=.5)
DM <- aaply(seq(1, length(meanGenesExpressed), 1), 1, function(x) {
mindex<-which.min(abs(qloess[[2]]-log10(meanGenesExpressed[x])))
as.vector(log10(CV2GenesExpressed[x]) - qloess[[1]][mindex])}, .expand=FALSE, .progress="text"
)
names(DM) <- names(meanGenesExpressed)
DM
}
means <- rowMeans(input)
CV2 <- (apply(input, 1, sd)/means)^2
plot(log10(means),log10(CV2))
plot(log10(means),log10(CV2), pch=16, cex=0.5)
DMs <- DM(meanGenes = means, CV2Genes = CV2, windowSize = 20)
DMs <- DM(meanGenes = means, CV2Genes = CV2, windowSize = 50)
CV2
DMs <- DM(meanGenes = means, CV2Genes = CV2, windowSize = 20)
zoo(x = CV2, order.by = means)
DMs
plot(DMs[!grepl("ERCC", names(DMs))], apply(MCMC_output@epsilon, 2, median))
abline(a = 1, b = 0)
plot(DMs[!grepl("ERCC", names(DMs))], apply(MCMC_output@epsilon, 2, median))
abline(a = 0, b = 1)
plot(density(DMs))
plot(density(apply(MCMC_output@epsilon, 2, median)))
plot(density(DMs), xlim(-2,1))
plot(density(DMs), xlim=c(-2,1))
plot(density(apply(MCMC_output@epsilon, 2, median)),  xlim=c(-2,1))
DMs <- DM(meanGenes = means, CV2Genes = CV2, windowSize = 10)
plot(DMs[!grepl("ERCC", names(DMs))], apply(MCMC_output@epsilon, 2, median))
abline(a = 0, b = 1)
plot(density(DMs), xlim=c(-2,1))
plot(density(apply(MCMC_output@epsilon, 2, median)),  xlim=c(-2,1))
DMs <- DM(meanGenes = means, CV2Genes = CV2, windowSize = 20)
plot(log10(means), DMs)
plot(log10(means), DMs, pch = 16)
plot(log10(means), DMs, pch = 16, cex = 0.5)
points(log10(apply(MCMC_output@mu, 2, median)), apply(MCMC_output@epsilon, 2, median))
plot(log10(means), DMs, pch = 16, cex = 0.5)
points(log10(apply(MCMC_output@mu, 2, median)), apply(MCMC_output@epsilon, 2, median), pch=16, cex=0.5, col="red")
elbow.k <- function(mydata){
dist.obj <- dist(mydata)
hclust.obj <- hclust(dist.obj)
css.obj <- css.hclust(dist.obj,hclust.obj)
elbow.obj <- elbow.batch(css.obj)
k <- elbow.obj$k
return(k)
}
no_cores <- detectCores()
load("/Users/nils/Google Drive/BASiCS_add-on/Results/MCMCs_active_naive.RData")
OffSet <- 1
MCMC_active <- MCMCs$active
Data_active <- Datas$active
MCMC_naive <- MCMCs$naive
Data_naive <- Datas$naive
source("/Users/nils/Google Drive/BASiCS_add-on/BASiCSplus/R/FunctionsPart1.R")
source("/Users/nils/Google Drive/BASiCS_add-on/BASiCSplus/R/FunctionsPart2.R")
source("/Users/nils/Google Drive/BASiCS_add-on/BASiCSplus/R/Classes.R")
source("/Users/nils/Google Drive/BASiCS_add-on/BASiCSplus/R/Methods.R")
MCMC_naive@mu <- MCMC_naive@mu * OffSet$OffSet21
MCMC_naive@phi <- MCMC_naive@phi/OffSet$OffSet21
OffSetCorrection <- function(Chain1, Chain2)
{
ModelOffSet21 = median(rowSums(Chain2@mu)/rowSums(Chain1@mu))
cat(paste("Model offset 2 vs 1:", ModelOffSet21, "\n"))
list("OffSet21" = ModelOffSet21)
}
OffSet <- OffSetCorrection(MCMC_naive, MCMC_active)
OffSet$OffSet21 <- 1
MCMC_naive@mu <- MCMC_naive@mu * OffSet$OffSet21
MCMC_naive@phi <- MCMC_naive@phi/OffSet$OffSet21
MCMC_combined <- CombineBASiCS_Chain(ChainTest = MCMC_active, ChainRef = MCMC_naive)
Data_combined <- CombineBASiCS_Data(DataTest = Data_active, DataRef = Data_naive)
Test <- BASiCS_D_TestDE(Data = Data_combined, object = MCMC_combined, GeneNames = Data_combined@GeneNames[!Data_combined@Tech], EpsilonM = 2, EpsilonD = 0.4, DistanceE = 0.2, OrderVariable = "GeneNames")
Test_FC0 <- BASiCS_D_TestDE(Data = Data_combined, object = MCMC_combined, GeneNames = Data_combined@GeneNames[!Data_combined@Tech], EpsilonM = 0, EpsilonD = 0.4, DistanceE = 0.2, OrderVariable = "GeneNames")
library(ggplot2)
dat <- data.frame(row.names = Test$Table$GeneNames, MeanRef = Test_FC0$Table$ExpRef, MeanTest = Test_FC0$Table$ExpTest, MeanResult=ifelse(Test_FC0$Table$ResultDiffExp == "NoDiff", "NoDiff", ifelse(Test$Table$ResultDiffExp == "NoDiff" & Test_FC0$Table$ResultDiffExp != "NoDiff", ">FC0", ifelse(Test$Table$ResultDiffExp == "Ref+", "Naive", "Active"))))
ggplot(dat) + geom_point(aes(x=log10(MeanRef+1), y=log10(MeanTest + 1), colour=MeanResult)) + theme_classic() + scale_color_manual(values = c("gray", "#ca0020", "#0571b0", "black"))
dat2 <- data.frame(row.names = Test_FC0$Table$GeneNames, DispRef = Test_FC0$Table$OverDispRef, DispTest = Test_FC0$Table$OverDispTest, DispResult=ifelse(Test_FC0$Table$ResultDiffOverDisp == "NoDiff", "NoDiff", ifelse(Test_FC0$Table$ResultDiffExp == "NoDiff" & Test_FC0$Table$ResultDiffOverDisp == "Ref+", "Naive", ifelse(Test_FC0$Table$ResultDiffExp == "NoDiff" & Test_FC0$Table$ResultDiffOverDisp == "Test+", "Active", ifelse(Test_FC0$Table$ResultDiffExp == "Ref+" & Test_FC0$Table$ResultDiffOverDisp != "NoDiff", "HigherNaive", ifelse(Test_FC0$Table$ResultDiffExp == "Test+" & Test_FC0$Table$ResultDiffOverDisp != "NoDiff", "HigherActive", "nothing"))))))
ggplot(dat2) + geom_point(aes(x=log10(DispRef), y=log10(DispTest), colour=DispResult)) + theme_classic() + geom_abline(slope = 1, intercept = 0) + scale_x_continuous(limits = c(-1, 1.5)) + scale_y_continuous(limits = c(-1, 1.5)) + scale_color_manual(values = c("#a6611a", adjustcolor("#ca0020", alpha.f = 0.2), adjustcolor("#0571b0", alpha.f = 0.2), "#018571", "gray"))
dat3 <- data.frame(row.names = Test_FC0$Table$GeneNames, HetRef = Test_FC0$Table$HetRef, HetTest = Test_FC0$Table$HetTest, HetResult= Test_FC0$Table$ResultDistHet)
ggplot(dat3) + geom_point(aes(x=HetRef, y=HetTest, colour=HetResult)) + theme_classic() + geom_abline(slope = 1, intercept = 0) + scale_color_manual(values = c("gray", "#7b3294", "#008837"))
boxplot(Test_FC0$Table$OverDispRef[Test_FC0$Table$ResultDiffExp == "NoDiff"], Test_FC0$Table$OverDispTest[Test_FC0$Table$ResultDiffExp == "NoDiff"])
boxplot(Test_FC0$Table$OverDispRef[Test_FC0$Table$ResultDiffExp == "NoDiff"], Test_FC0$Table$OverDispTest[Test_FC0$Table$ResultDiffExp == "NoDiff"], outline = FALSE)
boxplot(log10(Test_FC0$Table$OverDispRef[Test_FC0$Table$ResultDiffExp == "NoDiff"]), log10(Test_FC0$Table$OverDispTest[Test_FC0$Table$ResultDiffExp == "NoDiff"]), outline = FALSE)
load("/Users/nils/Google Drive/Platy/5th_approch/data/normalized/10000_Genes_160527.RData")
raw <- read.table("/Users/nils/Google Drive/Platy/5th_approch/revision/all_HTSeqStats.txt", header = TRUE)
dim(raw)
raw.1 <- raw[,colnames(exp.data)]
raw.1
colnames(exp.data)
colnames(raw)
colnames(raw) <- sapply(colnames(raw), function(n){unlist(strsplit(n, split = "."))[1]})
colnames(raw)
raw <- read.table("/Users/nils/Google Drive/Platy/5th_approch/revision/all_HTSeqStats.txt", header = TRUE)
sapply(colnames(raw), function(n){unlist(strsplit(n, split = "."))[1]})
sapply(colnames(raw), function(n){unlist(strsplit(n, split = "."))[2]})
sapply(colnames(raw), function(n){unlist(strsplit(n, split = "."))[3]})
sapply(colnames(raw), function(n){unlist(strsplit(n, split = "\."))[1]})
sapply(colnames(raw), function(n){unlist(strsplit(n, split = "\\."))[1]})
colnames(raw) <- sapply(colnames(raw), function(n){unlist(strsplit(n, split = "\\."))[1]})
colnames(raw)
raw[,colnames(exp.data)]
raw.1 <- raw[,colnames(exp.data)]
raw.cells <- read.table("/Users/nils/Google Drive/Platy/5th_approch/data/raw/mergedRef_genes.raw.htseq1.tsv", header = TRUE, sep = "\t")
all <- rbind(raw.cells[colnames(exp.data),], raw.1)
all <- rbind(raw.cells[,colnames(exp.data)], raw.1)
all <- rbind(raw.1, raw.cells[,colnames(exp.data)])
df <- data.frame(row.names = colnames(all), total_reads = rowSums(all), mapped_reads = rowSums(all[-c(1:5),]), ambig = all[2,], multi = all[5,])
colnames(all)
rowSums(all)
df <- data.frame(row.names = colnames(all), total_reads = colSums(all), mapped_reads = colSums(all[-c(1:5),]), ambig = all[2,], multi = all[5,])
library(ggplot2)
ggplot(df) + geom_bar()
library(reshape)
ggplot(melt(df)) + geom_bar()
melt(df)
head(df)
all[5,]
all[2,]
dim(df)
df <- data.frame(row.names = colnames(all), total_reads = colSums(all), mapped_reads = colSums(all[-c(1:5),]), ambig = all[2,], multi = all[5,])
dim(df)
colSums(all)
df <- data.frame(row.names = colnames(all), total_reads = as.numeric(colSums(all)), mapped_reads = as.numeric(colSums(all[-c(1:5),])), ambig = as.numeric(all[2,]), multi = as.numeric(all[5,]))
dim(df)
library(ggplot2)
library(reshape)
ggplot(melt(df)) + geom_bar()
ggplot(df) + geom_bar()
barplot(df)
barplot(as.matrix(df))
barplot(as.matrix(t(df)))
barplot(as.matrix(t(df[,2:4])))
df[,2:4] <- df[,2:4]/df[,1]
ggplot(df) + geom_bar()
barplot(as.matrix(t(df[,2:4])))
head(df)
library(BASiCS)
input <- read.table("/Users/nils/Google Drive/Platy/5th_approch/data/raw/160524_QCfiltered.txt", sep = "\t")
dim(input)
ERCC.1 <- exp.data.new[which(grepl("ERCC-0", rownames(exp.data.new))),]
ERCC.1 <- ERCC.1[rowSums(ERCC.1)>0,]
counts <- exp.data.new[-which(grepl("ERCC-0", rownames(exp.data.new))),]
plot(log10(rowSums(counts) + 1))
which(log10(rowSums(counts) + 1) > 6)
counts <- counts[which(log10(rowSums(counts) + 1) > 1 & log10(rowSums(counts) + 1) < 6),]
ERCC.conc <- read.table("/Users/nils//Google Drive//Platy///Data//ERCC_conc.txt", header=TRUE, sep = "\t", fill = TRUE)
ERCC.num <- matrix(data=NA, nrow=nrow(ERCC.conc), ncol=1)
ERCC.num[,1] <- (ERCC.conc[,4]*(10^(-18)))*(6.0221417*(10^23))
ERCC.num.final <- ERCC.num/800000
rownames(ERCC.num) <- rownames(ERCC.num.final) <- ERCC.conc[,2]
chips <- unlist(lapply(rownames(cluster)[cluster$col == i], function(n){paste(unlist(strsplit(n, split = "x"))[1], "x", sep = "")}))
chips <- sapply(colnames(input), function(n){paste(unlist(strsplit(n, split = "x"))[1], "x", sep = "")})
chips
cond <- unique(chips)
cond
MCMCs <- list()
Datas <- list()
i <- 1
Counts <- rbind(counts[,grepl(cond[i], colnames(counts))], ERCC.1[,grepl(cond[i], colnames(counts))])
Tech <- c(rep(FALSE, nrow(counts)), rep(TRUE, nrow(ERCC.1)))
SpikeInput <- ERCC.num.final[rownames(ERCC.1),1]
SpikeInput.1 <- data.frame("Name" = names(SpikeInput),
"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data <- newBASiCS_Data(as.matrix(Counts), Tech, SpikeInput.1, BatchInfo = chips)
cur_cells <- colnames(counts)[grepl(cond[i], colnames(counts))]
cur_cells
cur_counts <- counts[grepl(cond[i], colnames(counts))]
cur_counts <- cur_counts[rowMeans(cur_counts) > 1,]
cur_cells <- colnames(counts)[grepl(cond[i], colnames(counts))]
cur_counts <- counts[,cur_cells]
cur_counts <- cur_counts[rowMeans(cur_counts) > 1,]
cur_ERCC <- ERCC.1[,cur_cells]
cur_ERCC <- cur_ERCC[rowSums(cur_ERCC) > 0,]
cur_cells <- colnames(counts)[grepl(cond[i], colnames(counts))]
cur_counts <- counts[,cur_cells]
cur_counts <- cur_counts[rowMeans(cur_counts) > 1,]
cur_ERCC <- ERCC.1[,cur_cells]
cur_ERCC <- cur_ERCC[rowSums(cur_ERCC) > 0,]
Counts <- rbind(cur_counts, cur_ERCC)
Tech <- c(rep(FALSE, nrow(cur_counts)), rep(TRUE, nrow(cur_ERCC)))
SpikeInput <- ERCC.num.final[rownames(cur_ERCC),1]
SpikeInput.1 <- data.frame("Name" = names(SpikeInput),
"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data <- newBASiCS_Data(as.matrix(Counts), Tech, SpikeInput.1, BatchInfo = chips)
Data <- newBASiCS_Data(as.matrix(Counts), Tech, SpikeInput.1)
MCMCs <- list()
Datas <- list()
for(i in 1:length(cond)){
cur_cells <- colnames(counts)[grepl(cond[i], colnames(counts))]
cur_counts <- counts[,cur_cells]
cur_counts <- cur_counts[rowMeans(cur_counts) > 1,]
cur_ERCC <- ERCC.1[,cur_cells]
cur_ERCC <- cur_ERCC[rowSums(cur_ERCC) > 0,]
Counts <- rbind(cur_counts, cur_ERCC)
Tech <- c(rep(FALSE, nrow(cur_counts)), rep(TRUE, nrow(cur_ERCC)))
SpikeInput <- ERCC.num.final[rownames(cur_ERCC),1]
SpikeInput.1 <- data.frame("Name" = names(SpikeInput),
"Molecules" = SpikeInput,
stringsAsFactors = FALSE)
Data <- newBASiCS_Data(as.matrix(Counts), Tech, SpikeInput.1)
MCMC_Output <- BASiCS_MCMC(Data, N = 20000, Thin = 20, Burn = 10000, PrintProgress = TRUE)
MCMCs[[paste("Batch", cond[i])]] <- MCMC_Output
Datas[[paste("Batch", cond[i])]] <- Data
}
rm(list=setdiff(ls(), c("MCMCs", "Datas")))
save.image("/Users/nils/Google Drive/Platy/5th_approch/revision/batches_MCMC.RData")
BASiCS_VarianceDecomp(Data = Datas$`Batch C1x`, object = MCMCs$`Batch C1x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C5x`, object = MCMCs$`Batch C5x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C4x`, object = MCMCs$`Batch C4x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C31x`, object = MCMCs$`Batch C31x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C26x`, object = MCMCs$`Batch C26x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C25x`, object = MCMCs$`Batch C25x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C22x`, object = MCMCs$`Batch C22x`)
BASiCS_VarianceDecomp(Data = Datas$`Batch C11x`, object = MCMCs$`Batch C11x`)
library(BASiCS)
load("/Users/nils/Google Drive/Platy/5th_approch/analysis/clustering/all_cluster_MCMCs.RData")
ANS.MCMC <- MCMCs$ANS
ANS.Data <- Datas$ANS
Cilia.MCMC <- MCMCs$Cilia
Cilia.Data <- Datas$Cilia
Striated.MCMC <- MCMCs$Striated
Striated.Data <- Datas$Striated
Gut.MCMC <- MCMCs$Gut
Gut.Data <- Datas$Gut
DiffTrunk.MCMC <- MCMCs$DiffTrunk
DiffTrunk.Data <- Datas$DiffTrunk
Undiff.MCMC <- MCMCs$Undiff
Undiff.Data <- MCMCs$Undiff
BASiCS_VarianceDecomp(ANS.Data, ANS.MCMC)
ANS.Data@BatchInfo
ANS.Data@BatchInfo <- "ANS"
ANS.Data@BatchInfo
ANS.Data@BatchInfo <- rep("ANS", 14)
BASiCS_VarianceDecomp(ANS.Data, ANS.MCMC)
BASiCS_VarianceDecomp(Striated.Data, Striated.MCMC)
Striated.Data@BatchInfo
BASiCS_VarianceDecomp(Cilia.Data, Cilia.MCMC)
Cilia.Data@BatchInfo
BASiCS_VarianceDecomp(Undiff.Data, Undiff.MCMC)
Undiff.MCMC <- MCMCs$Undiff
Undiff.Data <- Datas$Undiff
BASiCS_VarianceDecomp(Undiff.Data, Undiff.MCMC)
ANS.MCMC@phi
dim(ANS.MCMC@phi)
ANS.MCMC@phi[1,]
ANS.MCMC@theta
dim(ANS.MCMC@theta)
ANS.MCMC <- MCMCs$ANS
ANS.Data <- Datas$ANS
BASiCS_VarianceDecomp(ANS.Data, ANS.MCMC)
undebug(BASiCS_VarianceDecomp)
undebug(BASiCS_VarianceDecomp())
undebug("BASiCS_VarianceDecomp")
debug("BASiCS_VarianceDecomp")
BASiCS_VarianceDecomp(ANS.Data, ANS.MCMC)
debug("HiddenVarDecomp")
BASiCS_VarianceDecomp(ANS.Data, ANS.MCMC)
PhiS = apply(ANS.MCMC@phi *ANS.MCMC@s, 1, median)
PhiS
dim(ANS.MCMC@mu)
Theta = apply(object@theta, 1, median)
Theta = apply(ANS.MCMC@theta, 1, median)
Theta
Theta = apply(ANS.MCMC@theta, 1, median)
PhiS = apply(ANS.MCMC@phi *ANS.MCMC@s, 1, median)
Aux = (1/(PhiS * ANS.MCMC@mu[,!ANS.Data@Tech])) + ANS.MCMC@delta * (Theta+1)
!ANS.Data@Tech
length(ANS.Data@Tech)
dim(ANS.MCMC@mu)
Aux = (1/(PhiS * ANS.MCMC@mu)) + ANS.MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (ANS.MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVarGlobal
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
BioVar
TechVar
mean(BioVar)
mean(TechVar)
mean(ShotNoise)
cur_Data <- ANS.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
cur_MCMC <- ANS.MCMC
cur_Data <- ANS.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (cur_MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
mean(BioVar)
mean(TechVar)
mean(ShotNoise)
cur_MCMC <- Cilia.MCMC
cur_Data <- Cilia.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (cur_MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
mean(BioVar)
mean(TechVar)
mean(ShotNoise)
cur_MCMC <- Striated.MCMC
cur_Data <- Striated.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (cur_MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
mean(BioVar)
mean(TechVar)
mean(ShotNoise)
cur_MCMC <- Undiff.MCMC
cur_Data <- Undiff.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (cur_MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
mean(TechVar)
mean(BioVar)
mean(ShotNoise)
cur_MCMC <- Gut.MCMC
cur_Data <- Gut.Data
Theta = apply(cur_MCMC@theta, 1, median)
PhiS = apply(cur_MCMC@phi *cur_MCMC@s, 1, median)
Aux = (1/(PhiS * cur_MCMC@mu)) + cur_MCMC@delta * (Theta+1)
TechVarGlobal = Theta / ( Aux + Theta )
BioVarGlobal = (cur_MCMC@delta * (Theta + 1)) / (Aux + Theta)
BioVar = apply(BioVarGlobal, 2, median)
TechVar = apply(TechVarGlobal, 2, median)
ShotNoise = 1-BioVar-TechVar
mean(BioVar)
mean(ShotNoise)
mean(TechVar)
install.packages("ellipse")
install.packages("SMPracticals")
library("ellipse")
library("SMPracticals")
pairs(trees, panel = panel.smooth)
pairs(log(trees), panel = panel.smooth)
pairs(log(trees), panel = panel.smooth)
pairs(trees, panel = panel.smooth)
pairs(log(trees), panel = panel.smooth)
attach(trees)
coplot(log(Volume) ~ log(Girth) | Height, panel = panel.smooth())
coplot(log(Volume) ~ log(Girth) | Height, panel = panel.smooth())
coplot(log(trees$Volume) ~ log(trees$Girth) | Height, panel = panel.smooth())
coplot(log(Volume) ~ log(Girth) | Height, panel = panel.smooth())
coplot(log(Volume) ~ log(Girth) | Height, panel = panel.smooth)
coplot(Volume ~ Girth | Height, panel = panel.smooth)
fit <- glm(Volume ~ Girth + Height)
summary(fit)
plot.glm.diag(fit)
library(MASS)
boxcox(fit)
fit <- glm(Volume ~ (Girth + Height)^(3))
fit <- glm(Volume ~ Girth + Height, family = "exp")
fit <- glm(Volume ~ Girth + Height, family = gamma)
fit <- glm(Volume ~ Girth + Height, family = gamma())
fit <- glm(log(Volume) ~ log10(Girth) + log10(Height))
summary(fit)
plot.glm.diag(fit)
boxcox(fit)
library(salinity)
data(salinity)
salinity$sal
salinity$lag
salinity$trend
salinity$dis
pairs(salinity, panel = panel.smooth)
pairs(log(salinity), panel = panel.smooth)
fit <- glm(salinity$sal ~ salinity$lag + salinity$trend + salinity$dis)
summary(fit)
plot.glm.diag(fit)
fit$deviance
fit$coefficients
fit$fitted.values
fit$effects
fit$R
fit$rank
fit$qr
data(shuttle)
fit <- glm(cbind(r, m-r) ~ temperature, data = shuttle, family = binomial)
shuttle$stability
shuttle$error
data(bliss)
r
m
plot(log(bliss$dose), bliss$r/bliss$m, ylim = c(0,1))
fit <- glm(cbind(bliss$r, bliss$m - bliss$r) ~ log(bliss$dose), binomial)
summary(fit)
points(log(dose), fitted(fit), pch = "L")
points(log(bliss$dose), fitted(fit), pch = "L")
fit <- glm(cbind(bliss$r, bliss$m - bliss$r) ~ log(bliss$dose), binomial(cloglog))
points(log(bliss$dose), fitted(fit), pch = "C")
library(Rtsne)
library(pheatmap)
library(ggplot2)
library(BASiCS)
setwd("/Users/nils/GitHub/ImmuneAging2017/")
genenames <- read.table("Data/Genenames.txt", sep = "\t", header = TRUE)
rownames(genenames) <- genenames[,1]
exp.data <- read.table("Data/normalized_data.txt", header = TRUE, sep = "\t")
shared.a <- read.xlsx("/Users/nils/Dropbox/CD4_TCell_ActivationEvolution/For_submission June 2016/03 Tables/S3.xlsx", sheetIndex = 1)
library(xlsx)
shared.a <- read.xlsx("/Users/nils/Dropbox/CD4_TCell_ActivationEvolution/For_submission June 2016/03 Tables/S3.xlsx", sheetIndex = 1)
shared.a  <- as.character(shared.a $Gene.ID)
shared.a
shared.a <- read.xlsx("Data/S3.xlsx", sheetIndex = 1)
shared.a  <- as.character(shared.a $Gene.ID)
load("/Users/nils/Downloads//DV_DE_all_B6CAST_logFC0.RData")
DV.B6.old <- DV_DE_datasets.DV$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table
DV_DE_datasets.DV <- DV_DE_datasets
DV.B6.old <- DV_DE_datasets$SS51_active_SS52_active_vs_SS63_active_SS64_active$Table
DV.B6.old <- DV.B6.old[match(shared.a, as.character(DV.B6.old$GeneNames)),]
dim(DV.B6.old)
plot(DE.B6.old$ExpLogFC, pch=16, col=ifelse(DE.B6.old$ResultDiffExp  == "SS51_active_SS52_active+", "dark blue", ifelse(DE.B6.old$ResultDiffExp  == "SS63_active_SS64_active+", "dark red", ifelse(DE.B6.old$ResultDiffExp  == "NoDiffTest", "black", "grey"))),
ylim = c(-6, 6))
plot(DV.B6.old$ExpLogFC, pch=16, col=ifelse(DE.B6.old$ResultDiffExp  == "SS51_active_SS52_active+", "dark blue", ifelse(DE.B6.old$ResultDiffExp  == "SS63_active_SS64_active+", "dark red", ifelse(DE.B6.old$ResultDiffExp  == "NoDiffTest", "black", "grey"))),
ylim = c(-6, 6))
plot(DV.B6.old$ExpLogFC, pch=16, col=ifelse(DV.B6.old$ResultDiffExp  == "SS51_active_SS52_active+", "dark blue", ifelse(DV.B6.old$ResultDiffExp  == "SS63_active_SS64_active+", "dark red", ifelse(DE.B6.old$ResultDiffExp  == "NoDiffTest", "black", "grey"))),
ylim = c(-6, 6))
plot(DV.B6.old$ExpLogFC, pch=16, col=ifelse(DV.B6.old$ResultDiffExp  == "SS51_active_SS52_active+", "dark blue", ifelse(DV.B6.old$ResultDiffExp  == "SS63_active_SS64_active+", "dark red", ifelse(DV.B6.old$ResultDiffExp  == "NoDiffTest", "black", "grey"))),
ylim = c(-6, 6))
DV.B6.old <- DV.B6.old[order(DV.B6.old$ExpOverall, decreasing = TRUE),]
plot(DV.B6.old$ExpLogFC, pch=16, col=ifelse(DV.B6.old$ResultDiffExp  == "SS51_active_SS52_active+", "dark blue", ifelse(DV.B6.old$ResultDiffExp  == "SS63_active_SS64_active+", "dark red", ifelse(DV.B6.old$ResultDiffExp  == "NoDiffTest", "black", "grey"))),
ylim = c(-6, 6))
plot(DV.B6.old$ExpLogFC, pch=16, col="grey"),
ylim = c(-6, 6))
plot(DV.B6.old$ExpLogFC, pch=16, col="grey", ylim = c(-6, 6))
abline(h = 0, lwd = 3, col = "red")
length(which(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"] > 0))/length(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"])
length(which(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"] < 0))/length(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"])
length(which(DV.B6.old$ExpLogFC > 0))/length(DV.B6.old$ExpLogFC)
length(which(DV.B6.old$ExpLogFC < 0))/length(DV.B6.old$ExpLogFC)
plot(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"], pch=16, ylim = c(-2, 2))
abline(h = 0, lwd = 3, col = "red")
plot(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"], pch=16, ylim = c(-2, 2), col = "grey")
abline(h = 0, lwd = 3, col = "red")
length(which(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"] > 0))/length(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"])
length(which(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"] < 0))/length(DV.B6.old$OverDispLogFC[DV.B6.old$ResultDiffExp == "NoDiff"])
DV.CAST.old <- DV_DE_datasets.DV$SS19_active_SS25_active_vs_SS53_active_SS54_active$Table
DV.CAST.old <- DV.CAST.old[match(shared.a, as.character(DV.CAST.old$GeneNames)),]
DV.CAST.old <- DV.CAST.old[order(DV.CAST.old$ExpOverall, decreasing = TRUE),]
plot(DV.CAST.old$ExpLogFC, pch=16, col="grey", ylim = c(-6, 6))
abline(h = 0, lwd = 3, col = "red")
shared.a
length(which(DV.CAST.old$ExpLogFC > 0))/length(DV.CAST.old$ExpLogFC)
length(which(DV.CAST.old$ExpLogFC < 0))/length(DV.CAST.old$ExpLogFC)
plot(DV.CAST.old$OverDispLogFC[DV.CAST.old$ResultDiffExp == "NoDiff"], pch=16, ylim = c(-2, 2), col = "grey")
abline(h = 0, lwd = 3, col = "red")
length(which(DV.CAST.old$OverDispLogFC[DV.CAST.old$ResultDiffExp == "NoDiff"] > 0))/length(DV.CAST.old$OverDispLogFC[DV.CAST.old$ResultDiffExp == "NoDiff"])
length(which(DV.CAST.old$OverDispLogFC[DV.CAST.old$ResultDiffExp == "NoDiff"] < 0))/length(DV.CAST.old$OverDispLogFC[DV.CAST.old$ResultDiffExp == "NoDiff"])
B6.young <- exp.data[,which(grepl("SS51_active", colnames(exp.data)) | grepl("SS52_active", colnames(exp.data)))]
B6.old <- exp.data[,which(grepl("SS63_active", colnames(exp.data)) | grepl("SS64_active", colnames(exp.data)))]
CAST.young <- exp.data[,which(grepl("SS19_active", colnames(exp.data)) | grepl("SS25_active", colnames(exp.data)))]
CAST.old <- exp.data[,which(grepl("SS53_active", colnames(exp.data)) | grepl("SS54_active", colnames(exp.data)))]
plot(density(apply(B6.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.young)})), ylim = c(0,3), xlim = c(0,1))
abline(v = median(apply(B6.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.young)})))
plot(density(apply(B6.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.old)})), ylim = c(0,3), xlim = c(0,1))
abline(v = median(apply(B6.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.old)})))
plot(density(apply(CAST.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.young)})), ylim = c(0,3), xlim = c(0,1))
abline(v = median(apply(CAST.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.young)})))
plot(density(apply(CAST.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.old)})), ylim = c(0,3), xlim = c(0,1))
abline(v = median(apply(CAST.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.old)})))
plot(log10(rowMeans(B6.young[shared.a,])), apply(B6.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.young)}), pch = 16, xlim = c(2,6), ylim = c(0,1), col = "red")
points(log10(rowMeans(B6.young[shared.a,])), apply(B6.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.old)}), pch = 16, xlim = c(2,6), ylim = c(0,1), col = "blue")
plot(apply(B6.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.young)}), apply(B6.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.old)}), pch = 16, col = ifelse(q.values < 0.1, "red", "black"), xlim = c(0,1), ylim = c(0,1))
stats <- list()
for(i in 1:length(shared.a)){
bin.t <- binom.test(x = length(which(B6.young[shared.a[i],] > 0)), n = ncol(B6.young), p = length(which(B6.old[shared.a[i],] > 0))/ncol(B6.old))
stats[[i]] <- bin.t
}
p.values <- sapply(stats, function(n){print(n$p.value)})
p.values[p.values == TRUE] <- 1
q.values <- p.adjust(p.values, method = "bonferroni")
plot(apply(B6.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.young)}), apply(B6.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(B6.old)}), pch = 16, col = ifelse(q.values < 0.1, "red", "black"), xlim = c(0,1), ylim = c(0,1))
abline(a = 0, b = 1, col = "red")
stats <- list()
for(i in 1:length(shared.a)){
bin.t <- binom.test(x = length(which(CAST.young[shared.a[i],] > 0)), n = ncol(CAST.young), p = length(which(CAST.old[shared.a[i],] > 0))/ncol(CAST.old))
stats[[i]] <- bin.t
}
p.values <- sapply(stats, function(n){print(n$p.value)})
p.values[p.values == TRUE] <- 1
p.values[p.values == FALSE] <- 0
q.values <- p.adjust(p.values, method = "bonferroni")
plot(apply(CAST.young[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.young)}), apply(CAST.old[shared.a,], 1, function(n){length(which(n > 0))/ncol(CAST.old)}), pch = 16, col = ifelse(q.values < 0.1, "red", "black"), xlim = c(0,1), ylim = c(0,1))
abline(a = 0, b = 1, col = "red")
